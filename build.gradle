plugins {
    id 'application'
    id "de.undercouch.download" version "5.3.0"
    id 'org.jreleaser' version '1.3.1'
}

def APP_VERSION = "3.9.0"

def myArtifactId = "umleditor"
def buildNumber = System.env.GITHUB_RUN_NUMBER
def os = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentOperatingSystem; 

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://jars.interlis.ch"
    }
}

task downloadBindist(type: Download) {
    src "https://jars.interlis.ch/ch/interlis/umleditor/${APP_VERSION}/umleditor-${APP_VERSION}-bindist.zip"
    dest "$buildDir/dwnld/umleditor-${APP_VERSION}-bindist.zip"
}

task unzip(type: Copy, dependsOn: 'downloadBindist') {
    from zipTree(file("$buildDir/dwnld/umleditor-${APP_VERSION}-bindist.zip"))
    into file("${buildDir}/umleditor/")
}

jreleaser {
    gitRootSearch = true
    
    project {
        name = myArtifactId
        description = 'umleditor.'
        website = 'http://blog.sogeo.services'
        authors = ['edigonzales']
        license = 'MIT'
        docsUrl = 'https://github.com/edigonzales/umleditor-package'
        copyright = '2022 Stefan Ziegler'
        version = APP_VERSION + "_" + buildNumber
        versionPattern = 'CUSTOM'
        java {
            groupId = 'ch.interlis'
        }
        vendor = "edigonzales"
    }

    release {
        github {
            repoOwner = 'edigonzales'
            overwrite = true
            apiEndpoint = 'https://api.github.com'
        }
    }

    assemble {
        jlink {
            app {
                active = 'ALWAYS'
                stereotype = 'DESKTOP'
                imageName = "umleditor-${APP_VERSION}"

                jdeps {
                    enabled = true
                    multiRelease = 'base'
                    ignoreMissingDeps = true
                }
                /*
                arg('-recursive')
                arg('--ignore-missing-deps')
                arg('--print-module-deps')
                */
                arg('--strip-debug')
                arg('--no-man-pages')
                arg('--no-header-files')    
                mainJar {
                    path = "${buildDir}/umleditor/umleditor-${APP_VERSION}.jar"
                }
                jars {
                   pattern = 'build/umleditor/**/*.jar'
                }


            }
        }

        jpackage {
            umleditor {
                active = 'ALWAYS'
                stereotype = 'DESKTOP'
                jlink = "app"
                applicationPackage {
                    appName = "umleditor"
                    appVersion = "${APP_VERSION}"
                }

                linux {
                    icon = 'icons/icon-umleditor-v2-128x128.png'
                    types = ['deb']  
                }

                osx {
                    icon = 'icons/icon-umleditor-v2-128x128.icns'
                    types = ['pkg']  
                }

                windows {
                    icon = 'icons/icon-umleditor-v2-128x128.ico'
                    types = ['exe']
                }

                java {
                    mainClass = "ch.ehi.umleditor.application.LauncherView"

                }

            }
        }

    }

    distributions {
        appNative {
            distributionType = 'BINARY'
            stereotype = 'DESKTOP'
            artifact {
                path = "./artifacts/umleditor-${APP_VERSION}-1_amd64.deb"
                platform = 'linux'
            }
            artifact {
                path = "./artifacts/umleditor-${APP_VERSION}.pkg"
                platform = 'osx'
            }
            artifact {
                path = "./artifacts/umleditor-${APP_VERSION}.exe"
                platform = 'windows'
            }
        }
    }
}

def getOperatingSystemName() {
    def os = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentOperatingSystem; 
    def osName = os.getName().toLowerCase();
    if (osName.contains("windows")) {
        return "windows";
    } else if (osName.contains("mac os x") || osName.contains("darwin") || osName.contains("osx")) {
        return "osx";
    } else if (osName.contains("linux")) {
        return "linux";
    } else {
        // not strictly true
        return "unix";
    }
}

def getArchitectureName() {
    def arch = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentArchitecture; 
    def archName = arch.getName().toLowerCase();
    return archName;    
}

